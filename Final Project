### Insert here a brief explanation of what CODE SECTION 1 does ###
# In Section one we import are libraries of functions as well as the dji sdk package which helps us with prior written functions.  We also import numerical py and math for mathematical expressions.
#

from djitellopy import Tello
import KeyPressModule as kp
import cv2
import numpy as np
import time
import math

### END CODE SECTION 1 ###

# Insert here a brief explanation of what CODE SECTION 2 does ###
#The first 3 lines we are creating variables for our  flying parameters for forward and backward as well as angular velocity and the time interval.  
#

############ PARAMETERS ############
fSpeed = 56  # Forward/Backward cm/sec
aSpeed = 26  # Angular Velocity, Degrees/sec
interval = 0.25

dInterval = fSpeed * interval  # Distance Interval
aInterval = aSpeed * interval  # Angular Interval
#########################################


### END CODE SECTION 2 ###

x, y = 500, 500
a = 0
yaw = 0

kp.init()
tello = Tello()
# tello.connect()
# print(tello.get_battery())

points = []

# global img
# tello.streamon()

### Insert here are brief explanation of what CODE SECTION 3 does ###
#At first we are calling our starting points and then in if else statements, we are assigning keys to certain responses that the robot will make if a certain key is pressed.
#

def getKeyboardInput():
    lr, fb, ud, yv = 0, 0, 0, 0
    speed = 50
    global x, y, yaw, a
    d = 0

    if kp.getKey("LEFT"):
        lr = -speed
        d = dInterval
        a = 180

    elif kp.getKey("RIGHT"):
        lr = speed
        d = -dInterval
        a = -180

    if kp.getKey("UP"):
        fb = speed
        d = dInterval
        a = 270

    elif kp.getKey("DOWN"):
        fb = -speed
        d = -dInterval
        a = -90

    if kp.getKey("w"):
        ud = speed
    elif kp.getKey("s"):
        ud = -speed

    if kp.getKey("a"):
        yv = -speed
        yaw += aInterval

    elif kp.getKey("d"):
        yv = speed
        yaw -= aInterval

    if kp.getKey("q"):
        tello.land()
        time.sleep(3)
    if kp.getKey("e"): tello.takeoff()
    
### END CODE SECTION 3 ###    


 #   if kp.getKey("z"):
 #       cv2.imwrite(f'Resources/Images/{time.time()}.jpg', img)
 #       time.sleep(0.3)

######Insert breif  explanation of what Code Bonus does########
 #### In this section we have our formula to calcuate our smooth angular turns.  Down in the += lines we are assigning out old values to our new values and then returning them down at the very bottom.
 
    time.sleep(interval)
    a += yaw
    x += int(d * math.cos(math.radians(a)))
    y += int(d * math.sin(math.radians(a)))

    return [lr, fb, ud, yv, x, y]


### Insert here a brief explanation of what CODE SECTION 4 does ###
#Here we define our function called draw points.  As well as assign our point to a specific plot on the graph.  We can also change the size.
#


def drawPoints(img, points):
    for point in points:
        cv2.circle(img, point, 5, (0, 0, 255), cv2.FILLED)

### END CODE SECTION 4 ###    

### Insert here a brief explanation of what CODE SECTION 5 does ###
# Here we have a loop that runs for ever checking for keys that get pressed.  If a key is pressed the buttom code igniciates the conncection between the keyboard, graph, and drone movement.
#

while True:
    vals = getKeyboardInput()
    tello.send_rc_control(vals[0], vals[1], vals[2], vals[3])

    img = np.zeros((1000, 1000, 3), np.uint8)
    points.append((vals[4], vals[5]))
    drawPoints(img, points)
    cv2.imshow("Output", img)
    cv2.waitKey(1)
    
### END CODE SECTION 5 ###    


### Ignore the following code, it's related to the Surveillance program and not used in the MAPPING Program ###

# img = tello.get_frame_read().frame
# img = cv2.resize(img, (360, 240))
# cv2.imshow("image", img)
# cv2.waitKey(1)
